package com.vidyo.rest.controllers.tyto;

import com.vidyo.TytoConstants;
import com.vidyo.dto.*;
import com.vidyo.framework.context.TenantContext;
import com.vidyo.services.TytoRemoteAPIService;
import com.vidyo.services.VidyoTytoBridge;
import com.vidyo.utils.LogUtils;
import com.vidyo.validators.TytoIdValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import static com.vidyo.TytoConstants.INVALID_VISIT_ID;
import static com.vidyo.validators.TytoIdValidator.ALLOWED_PATTERN;
import static java.util.Collections.singletonList;

@RestController
@RequestMapping(value = "/api/extintegration/tyto/v1/visits")
@Validated
public class VisitsController {

	private static final Logger logger = LoggerFactory.getLogger(VisitsController.class);

	private final TytoRemoteAPIService tytoApi;

	private final VidyoTytoBridge apiBridge;

	@Autowired
	public VisitsController(TytoRemoteAPIService tytoRemoteService,
							VidyoTytoBridge vidyoTytoBridge) {
		this.tytoApi = tytoRemoteService;
		this.apiBridge = vidyoTytoBridge;
	}

	/**
	 * Create Visit API which accepts identifier (generated by connect),
	 * clinicianIdentifier (Physician GUID) and stationIdentifier (Patient's GUID)
	 * as the input and forwards the request to TytoServer with their Public IP
	 * address.
	 * 
	 * @param visitRequestBody
	 * @param result
	 * @return
	 */
	@PostMapping(
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> createVisit( @RequestBody @Valid VisitRequest visitRequestBody,
										   BindingResult result, HttpServletRequest request) {
		if(!TytoIdValidator.isValid(visitRequestBody.getIdentifier(), ALLOWED_PATTERN)) {
			LogUtils.logValidationError(visitRequestBody.getIdentifier(), request, 
					(visitRequestBody != null) ? visitRequestBody.toString() : null);
			return new ResponseEntity<>(singletonList(TytoConstants.INVALID_VISIT_IDENTIFIER),HttpStatus.BAD_REQUEST);
		} else if(result.hasErrors()) {
			result.getAllErrors().forEach(objectError -> {
				if( objectError instanceof FieldError) {
					FieldError fe = (FieldError) objectError;
					logger.error(" Validation failed for createVisit: Field {} {}. RejectedValue: {}, errorCode: {}",
							fe.getField(),  fe.getDefaultMessage(), fe.getRejectedValue(), fe.getCode());
				} else {
					logger.error("validation failed for create visit object, reason", objectError.getDefaultMessage());
				}
			});
			return new ResponseEntity<>(singletonList(TytoConstants.MANDATORY_FIELDS_EMPTY_OR_INVALID),HttpStatus.BAD_REQUEST);
		} else {
			VisitResponse visitResponse = tytoApi.createVisit(visitRequestBody,
					TenantContext.getTenantId(), request.getRemoteAddr());
			return new ResponseEntity<>(visitResponse, HttpStatus.CREATED);
		}
	}

	/**
	 * Returns the status of the visit based on the TytoIdentifier param.
	 * This param is returned by the create visit API
	 * @param tytoId
	 * @return
	 */
	@GetMapping(value = "/{tytoId}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getVisitRequest(@PathVariable("tytoId") String tytoId, HttpServletRequest request) {
		if (TytoIdValidator.isValid(tytoId)) {
			GetVisitResponse tytoResponse = tytoApi.getVisit(tytoId,
					TenantContext.getTenantId());
			return new ResponseEntity<GetVisitResponse>(tytoResponse, HttpStatus.OK);
		} else {
			LogUtils.logValidationError(tytoId, request, null);
			return new ResponseEntity<>(singletonList(INVALID_VISIT_ID),
					HttpStatus.BAD_REQUEST);
		}
	}


    @PutMapping(value = "/{tytoId}/reviews", consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> createVisitReviewRequest(@RequestBody VisitReviewRequest visitReviewRequest,
                                                      @PathVariable("tytoId") String tytoId, 
                                                      HttpServletRequest request) {
        if (TytoIdValidator.isValid(tytoId)) {
            VisitReviewTytoRequest tytoRequest = apiBridge
                    .createVisitReview(TenantContext.getTenantId(), visitReviewRequest, request.getRemoteAddr());

            VisitReviewTytoResponse tytoResponse = tytoApi.createVisitReview(tytoRequest,
                    tytoId, TenantContext.getTenantId());
            VisitReviewResponse response = new VisitReviewResponse();
            response.setReviewerUrl(tytoResponse.getClinicianUrl());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } else {
        	LogUtils.logValidationError(tytoId, request, (visitReviewRequest != null) ? visitReviewRequest.toString() : null);
            return new ResponseEntity<>(singletonList(INVALID_VISIT_ID),
                    HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(value = "/{visitId}/status",
    		consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> updateVisitStatus(@PathVariable String visitId,
											   @RequestBody ChangeVisitStatusRequest changeStateRequest,
											   HttpServletRequest request){
		if (!TytoIdValidator.isValid(visitId, ALLOWED_PATTERN)) {
			LogUtils.logValidationError(visitId, request, (changeStateRequest != null) ? changeStateRequest.toString() : null);
			return new ResponseEntity<>(singletonList(TytoConstants.INVALID_VISIT_IDENTIFIER),HttpStatus.BAD_REQUEST);
		} else {
			tytoApi.changeVisitStatus(TenantContext.getTenantId(),
					visitId,
					changeStateRequest);
			return new ResponseEntity<>(HttpStatus.OK);
		}
	}
}
