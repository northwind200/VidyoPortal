<?xml version="1.0" encoding="UTF-8"?>

<wsdl:definitions name="VidyoPortalUCClientsService"
        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
        xmlns:tns="http://portal.vidyo.com/ucclients"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
        targetNamespace="http://portal.vidyo.com/ucclients">

	<wsdl:types>

		<xs:schema xmlns:tns="http://portal.vidyo.com/ucclients"
                   targetNamespace="http://portal.vidyo.com/ucclients"
                   elementFormDefault="qualified"
                   attributeFormDefault="qualified">

			<xs:annotation>
				<xs:documentation xml:lang="en"/>
			</xs:annotation>

			<xs:element name="Status">
				<xs:annotation>
					<xs:documentation>String presentation of success operation - "OK"</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="OK"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="ErrorMessage" type="xs:string">
				<xs:annotation>
					<xs:documentation>String presentation of fault</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="EID">
				<xs:annotation>
					<xs:documentation>
                        Global unique ID generated by Vidyo Endpoint.
                    </xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:maxLength value="64"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

            <xs:simpleType name="EntityID">
                <xs:annotation>
                    <xs:documentation>
                        This is an ID of addressing object in VidyoPortal (Member, Room, or Legacy device).
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:int"/>
            </xs:simpleType>

            <xs:element name="EntityType">
                <xs:annotation>
                    <xs:documentation>
                        There are three types of entities in VidyoPortal:
                        1. Member - A member is an authorized user of VidyoPortal with a user account.
                        - A member may have at the most one personal room.
                        - A member has a display name
                        - A member has an extension that can also be used for search purposes.

                        2. Rooom - It is a meeting place. Rooms are of two kinds:
                        - Personal, as explained above
                        - Public.
                        Each room has a owner assigned who can control the room.

                        3. Legacy - This entity represents external endpoints. Think of it as a label to identify and
                        search external devices.
                        Legacy entity does not have an account on the VidyoPortal. There is no owner assigned to legacy
                        devices.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Member"/>
                        <xs:enumeration value="Room"/>
                        <xs:enumeration value="Legacy"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>

            <xs:element name="Language">
                <xs:annotation>
                    <xs:documentation>Languages supported by VidyoPortal</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="en"/>
                        <xs:enumeration value="de"/>
                        <xs:enumeration value="es"/>
                        <xs:enumeration value="fr"/>
                        <xs:enumeration value="it"/>
                        <xs:enumeration value="ja"/>
                        <xs:enumeration value="ko"/>
                        <xs:enumeration value="pt"/>
                        <xs:enumeration value="zh_CN"/>
                        <xs:enumeration value="fi"/>
                        <xs:enumeration value="pl"/>
                        <xs:enumeration value="zh_TW"/>
                        <xs:enumeration value="th"/>                        
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>

            <xs:element name="MemberStatus">
                <xs:annotation>
                    <xs:documentation>
                        Describes the member status based on the operation state of the endpoint in use by the member:
                        - Status is 'Offline' and hence can't be reached for a conference.
                        - Status is "Online' and can be reached for a conference or a direct call.
                        - Status is 'Busy' in conference and can't can be reached for another conference or a direct call.
                        - Status is 'BusyInOwnRoom' in conference in own personal room and can't can be reached for another conference.
                        - Status is 'Ringing' endpoint associated with member start to ring on receive  direct call or invite event from other part.
                        - Status is 'RingAccepted' endpoint associated with member accept the call from other part.
                        - Status is 'RingRejected' endpoint associated with member reject the call from other part.
                        - Status is 'RingNoAnswer' endpoint associated with member is not answered in some period of time.
                        - Status is 'Alerting' endpoint associated with member alerted by the call from other part.
                        - Status is 'AlertCancelled' endpoint associated with member canceled alert by the call from other part.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Offline"/>
                        <xs:enumeration value="Online"/>
                        <xs:enumeration value="Busy"/>
                        <xs:enumeration value="BusyInOwnRoom"/>
                        <xs:enumeration value="Ringing"/>
                        <xs:enumeration value="RingAccepted"/>
                        <xs:enumeration value="RingRejected"/>
                        <xs:enumeration value="RingNoAnswer"/>
                        <xs:enumeration value="Alerting"/>
                        <xs:enumeration value="AlertCancelled"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>

            <xs:element name="MemberMode">
                <xs:annotation>
                    <xs:documentation>
                        The Member can override the current status with these possible values. Changing a mode will
                        impact VidyoPortal operations.
                        For e.g. if the mode is set to DoNotDisturb for a member, this member will not get any incoming
                        requests to join a meeting or a direct call.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Available"/>
                        <xs:enumeration value="Away"/>
                        <xs:enumeration value="DoNotDisturb"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>

            <xs:element name="RoomStatus">
                <xs:annotation>
                    <xs:documentation>
                        Status is 'Empty' and hence can be used for meeting.
                        Status is "Full' and is not accepting any more participants to the meeting.
                        Status is 'Occupied' some participants use the room for meeting.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Empty"/>
                        <xs:enumeration value="Full"/>
                        <xs:enumeration value="Occupied"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>

            <xs:element name="RoomMode">
                <xs:annotation>
                    <xs:documentation>
                        - 'roomURL' (optional) means that room has an URL to be used to join the meeting. Typically used for sending invitations to users via mail, etc.
                        - 'roomLocked' means the owner is not allowing any more participants to join the room.
                        - is 'hasPIN' means that the participant is required to enter a PIN in order to join this room.
                        - 'roomPIN' is the actual PIN that participant uses to enter the room.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element minOccurs="0" name="roomURL" nillable="true" type="xs:string"/>
                        <xs:element name="isLocked" type="xs:boolean"/>
                        <xs:element name="hasPin" type="xs:boolean"/>
                        <xs:element minOccurs="0" name="roomPIN" nillable="true" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="Entity">
                <xs:annotation>
                    <xs:documentation>
                        This object is returned as a result of search for member, public room, or legacy device.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="entityID" type="tns:EntityID"/>
                        <xs:element ref="tns:EntityType"/>
                        <xs:element name="displayName" type="xs:string"/>
                        <xs:element name="extension" type="xs:string"/>
                        <xs:element name="tenant" type="xs:string"/>
                        <xs:element minOccurs="0" name="description" type="xs:string"/>
                        <xs:element minOccurs="0" ref="tns:Language"/>
                        <xs:element minOccurs="0" ref="tns:MemberStatus"/>
                        <xs:element minOccurs="0" ref="tns:MemberMode"/>
                        <xs:element minOccurs="0" name="canCallDirect" type="xs:boolean"/>
                        <xs:element minOccurs="0" name="canJoinMeeting" type="xs:boolean"/>
                        <xs:element minOccurs="0" ref="tns:RoomStatus"/>
                        <xs:element minOccurs="0" ref="tns:RoomMode"/>
                        <xs:element minOccurs="0" name="canControl" type="xs:boolean"/>
                        <xs:element minOccurs="0" name="audio" nillable="true" type="xs:boolean"/>
                        <xs:element minOccurs="0" name="video" nillable="true" type="xs:boolean"/>
                        <xs:element minOccurs="0" name="appshare" nillable="true" type="xs:boolean"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="UserStatus">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="username" type="xs:string"/>
                        <xs:element name="tenant" type="xs:string"/>
                        <xs:element ref="tns:MemberStatus"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- BrowserAccessKey -->
            <xs:element name="BrowserAccessKeyRequest">
                <xs:annotation>
                    <xs:documentation>
                        Request for Browser Access Key to create a URL to open browser without login process.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence/>
                </xs:complexType>
            </xs:element>
            <xs:element name="BrowserAccessKeyResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element  name="BrowserAccessKey" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- getUserData -->
            <xs:element name="GetUserDataRequest">
                <xs:annotation>
                    <xs:documentation>
                        User identified in Http Authentication header is associated with the vidyo endpoint identifier.
                        Portal will check if user is linked to EID and return user data if linked and exception if not.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:EID"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="GetUserDataResponse">
                <xs:annotation>
                    <xs:documentation>
                        If the user's authentication is successfull and linked, the Member entity is returned.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:Entity"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- CreateMyRoomURL -->
            <xs:element name="CreateMyRoomURLRequest">
                <xs:annotation>
                    <xs:documentation>
                        Request to create a URL for a Member's personal room.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence/>
                </xs:complexType>
            </xs:element>
            <xs:element name="CreateMyRoomURLResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:Status"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- GetUserStatus -->
            <xs:element name="GetUserStatusRequest">
                <xs:annotation>
                    <xs:documentation>
                        Request status of second party. In case of tenant is not specified portal will return
                        a list if username, tenants and their statuses.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="username" type="xs:string"/>
                        <xs:element minOccurs="0" nillable="true" name="tenant" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="GetUserStatusResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:UserStatus" minOccurs="1" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- InviteToConference -->
            <xs:element name="InviteToConferenceRequest">
                <xs:annotation>
                    <xs:documentation>
                        Invites a Second party member to a members conference.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="username" type="xs:string"/>
                        <xs:element name="tenant" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="InviteToConferenceResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:Status"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- JoinConference -->
            <xs:element name="JoinConferenceRequest">
                <xs:annotation>
                    <xs:documentation>
                        Request by a member to join a meeting room identified by username and tenant. To join the personal room
                        belonging to a member, the username and tenant must be equals to the Member's info.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="username" type="xs:string"/>
                        <xs:element name="tenant" type="xs:string"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name="JoinConferenceResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:Status"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <!-- StartMyConference -->
            <xs:element name="StartMyConferenceRequest">
                <xs:annotation>
                    <xs:documentation>
                        Request by a member to start/join a conference in personal meeting room.
                    </xs:documentation>
                </xs:annotation>
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
            </xs:element>
            <xs:element name="StartMyConferenceResponse">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:Status"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

			<!-- Exceptions -->
			<xs:element name="GeneralFault">
				<xs:annotation>
					<xs:documentation>
                        This means that the exceptions happens in system.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="InvalidArgumentFault">
				<xs:annotation>
					<xs:documentation>
                        This means that the arguments which are passed into services are wrong.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="RoomDisabledFault">
				<xs:annotation>
					<xs:documentation>
                        This means that the room, ID of which was passed as argument, is disabled.
                    </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

            <xs:element name="NotLicensedFault">
                <xs:annotation>
                    <xs:documentation>
                        This means that usage of API is not licensed.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:ErrorMessage"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

            <xs:element name="SeatLicenseExpiredFault">
                <xs:annotation>
                    <xs:documentation>
                        This means that the seat license has expired and needs to be renewed.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="tns:ErrorMessage"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>

		</xs:schema>

	</wsdl:types>

    <!-- Vidyo Desktop methods -->
    <wsdl:message name="BrowserAccessKeyInput">
        <wsdl:part name="parameter" element="tns:BrowserAccessKeyRequest"/>
    </wsdl:message>
    <wsdl:message name="BrowserAccessKeyOutput">
        <wsdl:part name="parameter" element="tns:BrowserAccessKeyResponse"/>
    </wsdl:message>

    <!-- OCS Plug-in methods -->
    <wsdl:message name="getUserDataInput">
        <wsdl:part name="parameter" element="tns:GetUserDataRequest"/>
    </wsdl:message>
    <wsdl:message name="getUserDataOutput">
        <wsdl:part name="parameter" element="tns:GetUserDataResponse"/>
    </wsdl:message>

    <wsdl:message name="createMyRoomURLInput">
        <wsdl:part name="parameter" element="tns:CreateMyRoomURLRequest"/>
    </wsdl:message>
    <wsdl:message name="createMyRoomURLOutput">
        <wsdl:part name="parameter" element="tns:CreateMyRoomURLResponse"/>
    </wsdl:message>

    <wsdl:message name="getUserStatusInput">
        <wsdl:part name="parameter" element="tns:GetUserStatusRequest"/>
    </wsdl:message>
    <wsdl:message name="getUserStatusOutput">
        <wsdl:part name="parameter" element="tns:GetUserStatusResponse"/>
    </wsdl:message>

    <wsdl:message name="inviteToConferenceInput">
        <wsdl:part name="parameter" element="tns:InviteToConferenceRequest"/>
    </wsdl:message>
    <wsdl:message name="inviteToConferenceOutput">
        <wsdl:part name="parameter" element="tns:InviteToConferenceResponse"/>
    </wsdl:message>

    <wsdl:message name="joinConferenceInput">
        <wsdl:part name="parameter" element="tns:JoinConferenceRequest"/>
    </wsdl:message>
    <wsdl:message name="joinConferenceOutput">
        <wsdl:part name="parameter" element="tns:JoinConferenceResponse"/>
    </wsdl:message>

    <wsdl:message name="startMyConferenceInput">
        <wsdl:part name="parameter" element="tns:StartMyConferenceRequest"/>
    </wsdl:message>
    <wsdl:message name="startMyConferenceOutput">
        <wsdl:part name="parameter" element="tns:StartMyConferenceResponse"/>
    </wsdl:message>

    <!-- Exceptions -->
	<wsdl:message name="GeneralFault">
		<wsdl:part name="fault" element="tns:GeneralFault"/>
	</wsdl:message>

	<wsdl:message name="InvalidArgumentFault">
		<wsdl:part name="fault" element="tns:InvalidArgumentFault"/>
	</wsdl:message>

	<wsdl:message name="RoomDisabledFault">
		<wsdl:part name="fault" element="tns:RoomDisabledFault"/>
	</wsdl:message>

    <wsdl:message name="NotLicensedFault">
        <wsdl:part name="fault" element="tns:NotLicensedFault"/>
    </wsdl:message>

    <wsdl:message name="SeatLicenseExpiredFault">
        <wsdl:part name="fault" element="tns:SeatLicenseExpiredFault"/>
    </wsdl:message>

	<wsdl:portType name="VidyoPortalUCClientsServicePortType">

        <wsdl:operation name="getBrowserAccessKey">
            <wsdl:documentation>get Browser Access Key</wsdl:documentation>
            <wsdl:input message="tns:BrowserAccessKeyInput"/>
            <wsdl:output message="tns:BrowserAccessKeyOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="getUserData">
            <wsdl:input message="tns:getUserDataInput"/>
            <wsdl:output message="tns:getUserDataOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="createMyRoomURL">
            <wsdl:input message="tns:createMyRoomURLInput"/>
            <wsdl:output message="tns:createMyRoomURLOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="getUserStatus">
            <wsdl:input message="tns:getUserStatusInput"/>
            <wsdl:output message="tns:getUserStatusOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="inviteToConference">
            <wsdl:input message="tns:inviteToConferenceInput"/>
            <wsdl:output message="tns:inviteToConferenceOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="joinConference">
            <wsdl:input message="tns:joinConferenceInput"/>
            <wsdl:output message="tns:joinConferenceOutput"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
        </wsdl:operation>

        <wsdl:operation name="startMyConference">
            <wsdl:input message="tns:startMyConferenceInput"/>
            <wsdl:output message="tns:startMyConferenceOutput"/>
            <wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
            <wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
            <wsdl:fault name="SeatLicenseExpiredFault" message="tns:SeatLicenseExpiredFault"/>
            <wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
            <wsdl:fault name="RoomDisabledFault" message="tns:RoomDisabledFault"/>
        </wsdl:operation>

	</wsdl:portType>

	<wsdl:binding name="VidyoPortalUCClientsServiceBinding" type="tns:VidyoPortalUCClientsServicePortType">

		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

        <wsdl:operation name="getBrowserAccessKey">
            <soap:operation soapAction="getBrowserAccessKey"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="getUserData">
            <soap:operation soapAction="getUserData"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="createMyRoomURL">
            <soap:operation soapAction="createMyRoomURL"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="getUserStatus">
            <soap:operation soapAction="getUserStatus"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="inviteToConference">
            <soap:operation soapAction="inviteToConference"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="joinConference">
            <soap:operation soapAction="joinConference"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

        <wsdl:operation name="startMyConference">
            <soap:operation soapAction="startMyConference"/>
            <wsdl:input>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:input>
            <wsdl:output>
                <soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
            </wsdl:output>
            <wsdl:fault name="NotLicensedFault">
                <soap:fault name="NotLicensedFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="SeatLicenseExpiredFault">
                <soap:fault name="SeatLicenseExpiredFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="GeneralFault">
                <soap:fault name="GeneralFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="InvalidArgumentFault">
                <soap:fault name="InvalidArgumentFault" use="literal"/>
            </wsdl:fault>
            <wsdl:fault name="RoomDisabledFault">
                <soap:fault name="RoomDisabledFault" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>

	</wsdl:binding>

	<wsdl:service name="VidyoPortalUCClientsService">
		<wsdl:port name="VidyoPortalUCClientsServicePort" binding="tns:VidyoPortalUCClientsServiceBinding">
			<soap:address location="http://localhost:8080/services/VidyoPortalUCClientsService"/>
		</wsdl:port>
	</wsdl:service>

</wsdl:definitions>
