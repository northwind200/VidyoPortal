<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="VidyoManagerService"
				  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
				  xmlns:tns="http://ws.vidyo.com/manager"
				  xmlns:xs="http://www.w3.org/2001/XMLSchema"
				  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
				  targetNamespace="http://ws.vidyo.com/manager">

	<wsdl:types>
		<xs:schema xmlns:tns="http://ws.vidyo.com/manager"
				   attributeFormDefault="qualified" elementFormDefault="qualified"
				   targetNamespace="http://ws.vidyo.com/manager">

			<xs:annotation>
				<xs:documentation xml:lang="en"/>
			</xs:annotation>

			<xs:element name="Status">
				<xs:annotation>
					<xs:documentation>String presentation of success operation - "OK"</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="OK"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="ErrorMessage" type="xs:string">
				<xs:annotation>
					<xs:documentation>String presentation of fault</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="ConferenceID">
				<xs:annotation>
					<xs:documentation>
						Conference ID is a conference name provided by Vidyo Portal (equal to room name).
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="512"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="EndpointGUID">
				<xs:annotation>
					<xs:documentation>
						Global unique ID generated by Vidyo Endpoint.
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="512"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="VidyoManagerSystemID">
				<xs:annotation>
					<xs:documentation>
						Global unique ID for a VidyoManager
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
						<xs:maxLength value="512"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="ClassOfConference">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="HD"/>
						<xs:enumeration value="VGA"/>
						<xs:enumeration value="CIF"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="Clearance">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="None"/>      <!-- Normal endpoint with normal privileges -->
						<xs:enumeration value="Owner"/>     <!-- Owner of the conference. Has full privileges -->
						<xs:enumeration value="Admin"/>     <!-- Administrator of the conference. Has full privileges except it can not promote other endpoints to Admin level -->
						<xs:enumeration value="Moderator"/> <!-- Moderator of the conference. Has ability to control all aspects of the conference but can not change privileges -->
						<xs:enumeration value="Operator"/> <!-- Similar to Admin, but has only some of the Admin's privileges -->
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="ClientType">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="None"/>     <!-- Normal endpoint -->
						<xs:enumeration value="Guest"/>    <!-- Guest endpoint -->
						<xs:enumeration value="Recorder"/> <!-- Dedicated recording endpoint -->
						<xs:enumeration value="Legacy"/>   <!-- Legacy endpoint -->
						<xs:enumeration value="Control"/>  <!-- Control only client -->
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:complexType name="Address">
				<xs:sequence>
					<!--  IP address or host name -->
					<xs:element name="IPorName" type="xs:string"/>
					<!--  port number of host -->
					<xs:element name="Port" type="xs:unsignedShort"/>
					<!--  Transport - TCP, TLS etc. -->
					<xs:element name="Transport" type="xs:string"/>
					<!--  optional priority -->
					<xs:element name="Priority" type="xs:unsignedShort" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="AddressesPerVM">
				<xs:sequence>
					<!--  VidyoManager identifier -->
					<xs:element name="Id" type="xs:string" minOccurs="1" maxOccurs="1"/>
					<!--  one or more Listen/Connect addresses -->
					<xs:element name="Address" type="tns:Address" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="RouterPoolList">
				<xs:sequence>
				    <!-- List of router pools -->
					<xs:element name="RouterPoolId" type="xs:string" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>

			<!-- Router Pool Priority List -->
			<!-- List of Router Pools in priority order. -->
			<!-- Each level is a list itself so multiple pools can have the same priority. -->
			<xs:complexType name="RouterPoolPriorityList">
				<xs:sequence>
					<!--  one or more lists of Router Pools -->
					<xs:element name="RouterPoolIds" type="tns:RouterPoolList" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="EndpointCallPref">
				<xs:sequence>
					<!--  Endpoint identifier -->
					<xs:element ref="tns:EndpointGUID"/>
					<!--  Display Name -->
					<xs:element name="User" type="xs:string"/>
					<!--  Maximum uplink bandwidth allowed for this endpoint -->
					<xs:element name="MaxUplinkBw" type="xs:integer" minOccurs="0"/>
					<!--  Maximum downlink bw allowed for this endpoint -->
					<xs:element name="MaxDownlinkBw" type="xs:integer" minOccurs="0"/>
					<!-- Logical group of VidyoRouters to select for this EP, if not present then vidyo manager picks any router out of the ones available -->
					<xs:element name="GroupId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="ApplicationData" type="xs:base64Binary" minOccurs="0"/>
					<!-- Optional clearance of this endpoint (defaults to None) -->
					<xs:element ref="tns:Clearance" minOccurs="0"/>
					<!-- Optional client type of this endpoint (defaults to None) -->
					<xs:element ref="tns:ClientType" minOccurs="0"/>
					<!-- Optional User ID of the user associated with this endpoint -->
					<xs:element name="UserId" type="xs:string" minOccurs="0"/>
					<!-- Optional Priority List of Router Pools to use for this endpoint (overrides endpoint rules) -->
					<xs:element name="RouterPools" type="tns:RouterPoolPriorityList" minOccurs="0"/>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="SpontaneousEndpointInfo">
				<xs:sequence>
					<!--  Endpoint identifier -->
					<xs:element ref="tns:EndpointGUID"/>
					<!-- Indication whether the endpoint is connected with a secure transport.  -->
					<xs:element name="IsSecure" type="xs:boolean"/>
					<!-- Address on endpoint being used to communicate. -->
					<xs:element name="LocalAddress" type="xs:string"/>
					<!-- Address endpoint appears to be at from the VidyoManager's persepctive. -->
					<xs:element name="ExternalAddress" type="xs:string"/>
					<!-- Optional display name of endpoint -->
					<xs:element name="EndpointName" type="xs:string" minOccurs="0"/>
					<!-- Optional location tag string provided by endpoint -->
					<xs:element name="LocationTag" type="xs:string" minOccurs="0"/>
					<!-- Optional clearance of this endpoint (defaults to None) -->
					<xs:element ref="tns:Clearance" minOccurs="0"/>
					<!-- Optional client type of this endpoint (defaults to None) -->
					<xs:element ref="tns:ClientType" minOccurs="0"/>
					<!-- Optional User ID of the user associated with this endpoint -->
					<xs:element name="UserId" type="xs:string" minOccurs="0"/>
					<!-- Optional Priority List of Router Pools to use for this endpoint (overrides endpoint rules) -->
					<xs:element name="RouterPools" type="tns:RouterPoolPriorityList" minOccurs="0"/>
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="LicenseFeatureData">
				<xs:sequence>
					<xs:element name="Name" type="xs:string" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxValue" type="xs:string" minOccurs="1" maxOccurs="1"/>
					<xs:element name="CurrentValue" type="xs:string" minOccurs="0" maxOccurs="1"/>
				  </xs:sequence>
			</xs:complexType>

			<!-- Group of Network Elements, VidyoRouters for now  -->
			<xs:complexType name="NEGroupType">
				<xs:sequence>
					<xs:element name="GroupID" type="xs:string"/>
					<xs:element name="GroupName" type="xs:string" minOccurs="0"/>
				  </xs:sequence>
			</xs:complexType>

			<!-- Group of Network Elements, VidyoRouters for now  -->
			<xs:complexType name="VidyoRouterInfo">
				<xs:sequence>
					<xs:element name="VidyoRouterID" type="xs:string"/>
					<xs:element name="VidyoRouterName" type="xs:string"/>
				</xs:sequence>
			</xs:complexType>


			<xs:element name="CreateConferenceRequest">
				<xs:annotation>
					<xs:documentation>
						This request is used by csp(portal) to create a conference.
						A conference MUST exist before you can start creating users to this conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- Name of the conference -->
						<xs:element ref="tns:ConferenceID"/>
						<!-- Max number of users that can be present in this conference, Can this be controlled via portal? -->
						<xs:element name="NumParticipants" type="xs:integer" minOccurs="0"/>
						<!-- Duration of the conference, if null it does not care otherwise it is automatically deleted at the expiry -->
						<xs:element name="Duration" type="xs:duration" minOccurs="0"/>
						<!-- Some proprietary value that a given conference will be different from others, for e.g. and HD conference vs. a CIF conference -->
						<xs:element ref="tns:ClassOfConference"/>
						<!-- Logical group of VidyoRouters to select for this conference, if not present then vidyo manager picks any router out of the ones available -->
						<xs:element name="GroupId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="CreateConferenceResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success creation of conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="ChangeConferenceRequest">
				<xs:annotation>
					<xs:documentation>
						This request is used by csp(portal) to change a conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- Name of the conference -->
						<xs:element ref="tns:ConferenceID"/>
						<!-- Max number of users that can be present in this conference, Can this be controlled via portal? -->
						<xs:element name="NumParticipants" type="xs:integer" minOccurs="0"/>
						<!-- Duration of the conference, if null it does not care otherwise it is automatically deleted at the expiry -->
						<xs:element name="Duration" type="xs:duration" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="ChangeConferenceResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success creation of conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="DeleteConferenceRequest">
				<xs:annotation>
					<xs:documentation>
						This request is used by csp(portal) to delete existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ConferenceID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="DeleteConferenceResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success deletion of conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="DisconnectAllRequest">
				<xs:annotation>
					<xs:documentation>
						This request is used by csp(portal) to disconnect all endpoints from existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ConferenceID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="DisconnectAllResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success disconnection of endpoints from the conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="AddEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Add an Endpoint to existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which this endpoint is added -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Delete conference when this endpoint leaves the conference, useful for p2p calls -->
						<xs:element name="DeleteConference" type="xs:boolean" minOccurs="0"/>
						<!--  call prefrences of the EP to be added -->
						<xs:element name="Endpoint" type="tns:EndpointCallPref"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="AddEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success add of Endpoint to existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="MakeCallRequest">
				<xs:annotation>
					<xs:documentation>
						Make a 2-party call between given endpoints using the given conference
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which this endpoints are added -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Caller's call preferences -->
						<xs:element name="FromEPInfo" type="tns:EndpointCallPref"/>
						<!--  Caller's call preferences -->
						<xs:element name="ToEPInfo" type="tns:EndpointCallPref"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="MakeCallResponse">
				<xs:annotation>
					<xs:documentation>
						OK - 2-party call request accepted.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="InviteEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Invite an EP to the given conference
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which this endpoints in invited -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  inviting user's call preferences (only endpoint ID and user string is used) -->
						<xs:element name="FromUser" type="tns:EndpointCallPref"/>
						<!--  Invitee's call preferences -->
						<xs:element name="ToEPInfo" type="tns:EndpointCallPref"/>
						<!--  alert the inviting user (no effect - not currently used) -->
						<xs:element name="AlertCaller" type="xs:boolean"/>
						<!-- Ring Duration.  Rings forever if not present -->
						<xs:element name="RingLengthSeconds" type="xs:integer" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="InviteEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						OK - invite endpoint request accepted.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="CancelInviteEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Cancel an Invite Endpoint request
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which this endpoints in invited -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  inviting user's call preferences (only endpoint ID is used) -->
						<xs:element name="FromUser" type="tns:EndpointCallPref"/>
						<!--  Invitee's call preferences (only endpoint ID is used) -->
						<xs:element name="ToEPInfo" type="tns:EndpointCallPref"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="CancelInviteEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						OK - request to cancel and invite request accepted.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="RemoveEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Remove an Endpoint from existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which the endpoint is belongs -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Endpoint indentifier -->
						<xs:element ref="tns:EndpointGUID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="RemoveEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success deletion of Endpoint from existing conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="StartRingRequest">
				<xs:annotation>
					<xs:documentation>
						Send Invitation to second party in call.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which the endpoint belongs -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Display Name -->
						<xs:element name="FromUser" type="xs:string"/>
						<!--  Endpoint indentifier of the invited endpoint -->
						<xs:element ref="tns:EndpointGUID"/>
						<!-- Ring Duration.  Rings forever if not present -->
						<xs:element name="RingLengthSeconds" type="xs:integer" minOccurs="0"/>
						<xs:element name="ApplicationData" type="xs:base64Binary" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="StartRingResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success to start prompt to other Endpoint.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="StopRingRequest">
				<xs:annotation>
					<xs:documentation>
						Stop send Invitation to second party in call.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which the endpoint belongs -->
						<xs:element ref="tns:ConferenceID"/>
						<xs:element name="FromUser" type="xs:string"/>
						<!--  Endpoint indentifier -->
						<xs:element ref="tns:EndpointGUID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="StopRingResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success to stop the prompt to other Endpoint.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="StartAlertRequest">
				<xs:annotation>
					<xs:documentation>
						Send alerting indication to the caller, presumably after receiving
						alerting indication from the called party.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which the endpoint belongs -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Display Name of the ringing party -->
						<xs:element name="FromUser" type="xs:string"/>
						<!--  Endpoint indentifier of the invited endpoint -->
						<xs:element ref="tns:EndpointGUID"/>
						<xs:element name="ApplicationData" type="xs:base64Binary" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="StartAlertResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success to start alerting the calling Endpoint.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="StopAlertRequest">
				<xs:annotation>
					<xs:documentation>
						The called party has stopped alerting
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Conference to which the endpoint belongs -->
						<xs:element ref="tns:ConferenceID"/>
						<!--  Display name of the called Endpoint -->
						<xs:element name="FromUser" type="xs:string"/>
						<!--  Endpoint indentifier -->
						<xs:element ref="tns:EndpointGUID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="StopAlertResponse">
				<xs:annotation>
					<xs:documentation>
						OK - success to stop the alerting to the caller Endpoint.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="CreateExternalLinkRequest">
				<xs:annotation>
					<xs:documentation>
						Request to create a link from an existing conference to a conference on an external entity
						and return the media address for the remote entity to use.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- conferenceID to link to external entity -->
						<xs:element name="LocalConferenceID" type="xs:string"/>
						<!-- linked remote conference -->
						<xs:element name="RemoteConferenceID" type="xs:string"/>
						<!-- LocalConferenceID, RemoteEntityID and RemoteConferenceID combined is required to be unique. -->
						<xs:element name="RemoteEntityID" type="xs:string"/>
						<!-- optional remote media address -->
						<xs:element name="RemoteMediaAddress" type="xs:string" minOccurs="0"/>
						<xs:element name="RemoteMediaAdditionalInfo" type="xs:string" minOccurs="0"/>
						<!-- optional: local router pool to link through -->
						<xs:element name="RouterPool" type="xs:string" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="CreateExternalLinkResponse">
				<xs:annotation>
					<xs:documentation>
						Response to the CreateExternalLinkRequest.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
			<xs:element ref="tns:Status"/>
			</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="ConnectExternalLinkRequest">
				<xs:annotation>
					<xs:documentation>
						Request to connect local conference to the external conference.
						CreateExternalLink must be done before Allow or Connect can be done.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- Local conference already created -->
						<xs:element name="LocalConferenceID" type="xs:string"/>
						<!-- linked remote conference  -->
						<xs:element name="RemoteConferenceID" type="xs:string"/>
						<!-- unique remote entity ID -->
						<xs:element name="RemoteEntityID" type="xs:string"/>
						<!-- remote media address, if not already known or has changed since. -->
						<xs:element name="RemoteMediaAddress" type="xs:string" minOccurs="0"/>
						<xs:element name="RemoteMediaAdditionalInfo" type="xs:string" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="ConnectExternalLinkResponse">
				<xs:annotation>
					<xs:documentation>
						Response to ConnectExternalLinkRequest
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="AllowExternalLinkRequest">
				<xs:annotation>
					<xs:documentation>
						Request to allow external link to the local conference.  CreateExternalLink
						must be done before Allow or Connect can be done.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- Local conference already created -->
						<xs:element name="LocalConferenceID" type="xs:string"/>
						<!-- linked remote conference -->
						<xs:element name="RemoteConferenceID" type="xs:string"/>
						<!-- unique remote entity ID -->
						<xs:element name="RemoteEntityID" type="xs:string"/>
						<!-- remote media address, if not already known or has changed since. -->
						<xs:element name="RemoteMediaAddress" type="xs:string" minOccurs="0"/>
						<xs:element name="RemoteMediaAdditionalInfo" type="xs:string" minOccurs="0"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="AllowExternalLinkResponse">
				<xs:annotation>
					<xs:documentation>
						Response to AllowExternalConferenceRequest
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="RemoveExternalLinkRequest">
				<xs:annotation>
					<xs:documentation>
						Request to disconnect (if connected) and remove the link to the
						external conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="LocalConferenceID" type="xs:string"/>
						<xs:element name="RemoteConferenceID" type="xs:string"/>
						<xs:element name="RemoteEntityID" type="xs:string"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="RemoveExternalLinkResponse">
				<xs:annotation>
					<xs:documentation>
						Response to RemoveExternalLinkRequest
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="AddSpontaneousEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Request to add an endpoint to an existing conference, bypathing the EMCP.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ConferenceID" type="xs:string"/>						
						<xs:element name="Endpoint" type="tns:SpontaneousEndpointInfo"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="AddSpontaneousEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						Response to the AddSpontaneousEndpointRequest.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="RemoveSpontaneousEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Request to remove a spontaneous endpoint from a conference, bypathing the EMCP.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="EndpointID" type="xs:string"/>
						<xs:element name="ConferenceID" type="xs:string"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="RemoveSpontaneousEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						Response to the RemoveSpontaneousEndpointRequest.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="InfoForEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Request from Vidyo Portal to Endpoint using VCAProtocol.
						This is used to send commands to endpoints. CSP and endpoints will understand some language.
						Endpoint app understands the commands, does the operation and sends any results to the
						originator.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Endpoint indentifier -->
						<xs:element ref="tns:EndpointGUID"/>
						<!--  Endpoint specific message in base64 encoded format-->
						<xs:element name="Content" type="xs:base64Binary"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="InfoForEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						Response from Endpoint to Vidyo Portal using VCAProtocol.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  Endpoint specific message in base64 encoded format-->
						<xs:element name="Content" type="xs:base64Binary"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetEMCPConfigRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request for EMCP configuration information.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetEMCPConfigResponse">
				<xs:annotation>
					<xs:documentation>
						EMCP configuration for the whole VidyoManager cluster.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  one or more EMCP Listen addresses per VM -->
						<xs:element name="EMCPListenAddress" type="tns:AddressesPerVM" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetSOAPConfigRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request for SOAP configuration.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetSOAPConfigResponse">
				<xs:annotation>
					<xs:documentation>
						SOAP configuration for the whole VidyoManager cluster.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  one or more SOAP Listen addresses per VM -->
						<xs:element name="SOAPListenAddress" type="tns:AddressesPerVM" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetPortalConfigRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request for Portal configuration for the VidyoManager cluster.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetPortalConfigResponse">
				<xs:annotation>
					<xs:documentation>
						Portal configuration for the whole VidyoManager cluster.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!--  All the Portals that VidyoMangers in the cluster talk to-->
						<xs:element name="VidyoPortalConnectAddress" type="tns:AddressesPerVM" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetLicenseDataRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request for currently effective licese data if LicenseText is absent, otherwise it's the decoded 
						license data.  Currently in use numbers are always returned.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="LicenseText" type="xs:base64Binary" minOccurs="0"/>
					 </xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="GetLicenseDataResponse">
				<xs:annotation>
					<xs:documentation>
						License Data currently in effect
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<!-- Feature names relevent to VidyoManger are "Ports", "VidyoManagers", "Start Date",
						"Expiry Date" (the current system license expiry date, call this soap service again to get the effective license on expiry),
						"Event Expiry Date" (in case an event license is in effect) -->
						<xs:element name="LicenseFeature" type="tns:LicenseFeatureData" minOccurs="3" maxOccurs="unbounded"/>
					 </xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="SetLicenseRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request to apply a new license, could be event license or system license, license manager (VM) will figure it out
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="LicenseText" type="xs:base64Binary"/>
					</xs:sequence>
				</xs:complexType>
			 </xs:element>

			<xs:element name="SetLicenseResponse">
				<xs:annotation>
					<xs:documentation>
						Response to request to apply a new license
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="ClearLicenseRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request to clear the current system license
					</xs:documentation>
				</xs:annotation>
			 </xs:element>

			<xs:element name="ClearLicenseResponse">
				<xs:annotation>
					<xs:documentation>
						Response to request to clear the current system license
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="AddLicensedEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Ask VM to remember about an endpoint limited by license that may not require a VidyoLine
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:EndpointGUID"/>
						<xs:element name="EndpointType" type="xs:string"/>
					</xs:sequence>
				</xs:complexType>
			 </xs:element>

			<xs:element name="AddLicensedEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						Response to AddLicensedEndpointRequest
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="RemoveLicensedEndpointRequest">
				<xs:annotation>
					<xs:documentation>
						Ask VM to remove an endpoint limited by license that may not require a VidyoLine
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:EndpointGUID"/>
						<xs:element name="EndpointType" type="xs:string"/>
					</xs:sequence>
				</xs:complexType>
			 </xs:element>

			<xs:element name="RemoveLicensedEndpointResponse">
				<xs:annotation>
					<xs:documentation>
						Response to RemoveLicensedEndpointRequest
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:Status"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetGroupsRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request to get the current NetworkElement group definitions
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetGroupsResponse">
				<xs:annotation>
					<xs:documentation>
						Network Element group definitions
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Groups" type="tns:NEGroupType" minOccurs="1" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetVidyoRoutersRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request to get the list of currently connected VidyoRouters
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetVidyoRoutersResponse">
				<xs:annotation>
					<xs:documentation>
						List of currently connected VidyoRouters
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="VidyoRouter" type="tns:VidyoRouterInfo" minOccurs="0" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<xs:element name="GetVidyoManagerSystemIDRequest" nillable="true">
				<xs:annotation>
					<xs:documentation>
						Request to get the identifier of the VidyoManager
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="GetVidyoManagerSystemIDResponse">
				<xs:annotation>
					<xs:documentation>
						Identifier for the responding VidyoManager
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:VidyoManagerSystemID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>


			<!-- Exceptions -->
			<xs:element name="GeneralFault">
				<xs:annotation>
					<xs:documentation>
						This means that some exception happened in system.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="InvalidArgumentFault">
				<xs:annotation>
					<xs:documentation>
						This means that the arguments which are passed into services are wrong.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="ConferenceNotExistFault">
				<xs:annotation>
					<xs:documentation>
						This means that the requested conference does not exist.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="EndpointNotExistFault">
				<xs:annotation>
					<xs:documentation>
						This means that the requested Endpoint does not exist.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="NotLicensedFault">
				<xs:annotation>
					<xs:documentation>
						This means that the current License situation does not allow requested operation.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="ResourceNotAvailableFault">
				<xs:annotation>
					<xs:documentation>
						This means that required resources are not available to process the request.
						e.g. No VidyoRouter available to create a conference.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

			<xs:element name="NotSupportedFault">
				<xs:annotation>
					<xs:documentation>
						This means that the requested service/feature is not supported/implemented by VidyoManager.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="tns:ErrorMessage"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>

		</xs:schema>
	</wsdl:types>


	<wsdl:message name="CreateConferenceInput">
		<wsdl:part name="parameter" element="tns:CreateConferenceRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateConferenceOutput">
		<wsdl:part name="parameter" element="tns:CreateConferenceResponse"/>
	</wsdl:message>

	<wsdl:message name="ChangeConferenceInput">
		<wsdl:part name="parameter" element="tns:ChangeConferenceRequest"/>
	</wsdl:message>
	<wsdl:message name="ChangeConferenceOutput">
		<wsdl:part name="parameter" element="tns:ChangeConferenceResponse"/>
	</wsdl:message>

	<wsdl:message name="DeleteConferenceInput">
		<wsdl:part name="parameter" element="tns:DeleteConferenceRequest"/>
	</wsdl:message>
	<wsdl:message name="DeleteConferenceOutput">
		<wsdl:part name="parameter" element="tns:DeleteConferenceResponse"/>
	</wsdl:message>

	<wsdl:message name="DisconnectAllInput">
		<wsdl:part name="parameter" element="tns:DisconnectAllRequest"/>
	</wsdl:message>
	<wsdl:message name="DisconnectAllOutput">
		<wsdl:part name="parameter" element="tns:DisconnectAllResponse"/>
	</wsdl:message>

	<wsdl:message name="AddEndpointInput">
		<wsdl:part name="parameter" element="tns:AddEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="AddEndpointOutput">
		<wsdl:part name="parameter" element="tns:AddEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="RemoveEndpointInput">
		<wsdl:part name="parameter" element="tns:RemoveEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveEndpointOutput">
		<wsdl:part name="parameter" element="tns:RemoveEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="MakeCallInput">
		<wsdl:part name="parameter" element="tns:MakeCallRequest"/>
	</wsdl:message>
	<wsdl:message name="MakeCallOutput">
		<wsdl:part name="parameter" element="tns:MakeCallResponse"/>
	</wsdl:message>

	<wsdl:message name="InviteEndpointInput">
		<wsdl:part name="parameter" element="tns:InviteEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="InviteEndpointOutput">
		<wsdl:part name="parameter" element="tns:InviteEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="CancelInviteEndpointInput">
		<wsdl:part name="parameter" element="tns:CancelInviteEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="CancelInviteEndpointOutput">
		<wsdl:part name="parameter" element="tns:CancelInviteEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="StartRingInput">
		<wsdl:part name="parameter" element="tns:StartRingRequest"/>
	</wsdl:message>
	<wsdl:message name="StartRingOutput">
		<wsdl:part name="parameter" element="tns:StartRingResponse"/>
	</wsdl:message>

	<wsdl:message name="StopRingInput">
		<wsdl:part name="parameter" element="tns:StopRingRequest"/>
	</wsdl:message>
	<wsdl:message name="StopRingOutput">
		<wsdl:part name="parameter" element="tns:StopRingResponse"/>
	</wsdl:message>

	<wsdl:message name="StartAlertInput">
		<wsdl:part name="parameter" element="tns:StartAlertRequest"/>
	</wsdl:message>
	<wsdl:message name="StartAlertOutput">
		<wsdl:part name="parameter" element="tns:StartAlertResponse"/>
	</wsdl:message>

	<wsdl:message name="StopAlertInput">
		<wsdl:part name="parameter" element="tns:StopAlertRequest"/>
	</wsdl:message>
	<wsdl:message name="StopAlertOutput">
		<wsdl:part name="parameter" element="tns:StopAlertResponse"/>
	</wsdl:message>

	<wsdl:message name="CreateExternalLinkInput">
		<wsdl:part name="parameter" element="tns:CreateExternalLinkRequest"/>
	</wsdl:message>
	<wsdl:message name="CreateExternalLinkOutput">
		<wsdl:part name="parameter" element="tns:CreateExternalLinkResponse"/>
	</wsdl:message>

	<wsdl:message name="ConnectExternalLinkInput">
		<wsdl:part name="parameter" element="tns:ConnectExternalLinkRequest"/>
	</wsdl:message>
	<wsdl:message name="ConnectExternalLinkOutput">
		<wsdl:part name="parameter" element="tns:ConnectExternalLinkResponse"/>
	</wsdl:message>

	<wsdl:message name="AllowExternalLinkInput">
		<wsdl:part name="parameter" element="tns:AllowExternalLinkRequest"/>
	</wsdl:message>
	<wsdl:message name="AllowExternalLinkOutput">
		<wsdl:part name="parameter" element="tns:AllowExternalLinkResponse"/>
	</wsdl:message>

	<wsdl:message name="RemoveExternalLinkInput">
		<wsdl:part name="parameter" element="tns:RemoveExternalLinkRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveExternalLinkOutput">
		<wsdl:part name="parameter" element="tns:RemoveExternalLinkResponse"/>
	</wsdl:message>

	<wsdl:message name="AddSpontaneousEndpointInput">
		<wsdl:part name="parameter" element="tns:AddSpontaneousEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="AddSpontaneousEndpointOutput">
		<wsdl:part name="parameter" element="tns:AddSpontaneousEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="RemoveSpontaneousEndpointInput">
		<wsdl:part name="parameter" element="tns:RemoveSpontaneousEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveSpontaneousEndpointOutput">
		<wsdl:part name="parameter" element="tns:RemoveSpontaneousEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="InfoForEndpointInput">
		<wsdl:part name="parameter" element="tns:InfoForEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="InfoForEndpointOutput">
		<wsdl:part name="parameter" element="tns:InfoForEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="GetEMCPConfigInput">
		<wsdl:part name="parameter" element="tns:GetEMCPConfigRequest"/>
	</wsdl:message>
	<wsdl:message name="GetEMCPConfigOutput">
		<wsdl:part name="parameter" element="tns:GetEMCPConfigResponse"/>
	</wsdl:message>

	<wsdl:message name="GetSOAPConfigInput">
		<wsdl:part name="parameter" element="tns:GetSOAPConfigRequest"/>
	</wsdl:message>
	<wsdl:message name="GetSOAPConfigOutput">
		<wsdl:part name="parameter" element="tns:GetSOAPConfigResponse"/>
	</wsdl:message>

	<wsdl:message name="GetPortalConfigInput">
		<wsdl:part name="parameter" element="tns:GetPortalConfigRequest"/>
	</wsdl:message>
	<wsdl:message name="GetPortalConfigOutput">
		<wsdl:part name="parameter" element="tns:GetPortalConfigResponse"/>
	</wsdl:message>

	<wsdl:message name="GetLicenseDataInput">
		<wsdl:part name="parameter" element="tns:GetLicenseDataRequest"/>
	</wsdl:message>
	<wsdl:message name="GetLicenseDataOutput">
		<wsdl:part name="parameter" element="tns:GetLicenseDataResponse"/>
	</wsdl:message>

	<wsdl:message name="SetLicenseInput">
		<wsdl:part name="parameter" element="tns:SetLicenseRequest"/>
	</wsdl:message>
	<wsdl:message name="SetLicenseOutput">
		<wsdl:part name="parameter" element="tns:SetLicenseResponse"/>
	</wsdl:message>

	<wsdl:message name="ClearLicenseInput">
		<wsdl:part name="parameter" element="tns:ClearLicenseRequest"/>
	</wsdl:message>
	<wsdl:message name="ClearLicenseOutput">
		<wsdl:part name="parameter" element="tns:ClearLicenseResponse"/>
	</wsdl:message>

	<wsdl:message name="SetVidyoManagerLicenseInput">
		<wsdl:part name="parameter" element="tns:SetLicenseRequest"/>
	</wsdl:message>
	<wsdl:message name="SetVidyoManagerLicenseOutput">
		<wsdl:part name="parameter" element="tns:SetLicenseResponse"/>
	</wsdl:message>

	<wsdl:message name="AddLicensedEndpointInput">
		<wsdl:part name="parameter" element="tns:AddLicensedEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="AddLicensedEndpointOutput">
		<wsdl:part name="parameter" element="tns:AddLicensedEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="RemoveLicensedEndpointInput">
		<wsdl:part name="parameter" element="tns:RemoveLicensedEndpointRequest"/>
	</wsdl:message>
	<wsdl:message name="RemoveLicensedEndpointOutput">
		<wsdl:part name="parameter" element="tns:RemoveLicensedEndpointResponse"/>
	</wsdl:message>

	<wsdl:message name="GetGroupsInput">
		<wsdl:part name="parameter" element="tns:GetGroupsRequest"/>
	</wsdl:message>
	<wsdl:message name="GetGroupsOutput">
		<wsdl:part name="parameter" element="tns:GetGroupsResponse"/>
	</wsdl:message>

	<wsdl:message name="GetVidyoRoutersInput">
		<wsdl:part name="parameter" element="tns:GetVidyoRoutersRequest"/>
	</wsdl:message>
	<wsdl:message name="GetVidyoRoutersOutput">
		<wsdl:part name="parameter" element="tns:GetVidyoRoutersResponse"/>
	</wsdl:message>

	<wsdl:message name="GetVidyoManagerSystemIDInput">
		<wsdl:part name="parameter" element="tns:GetVidyoManagerSystemIDRequest"/>
	</wsdl:message>
	<wsdl:message name="GetVidyoManagerSystemIDOutput">
		<wsdl:part name="parameter" element="tns:GetVidyoManagerSystemIDResponse"/>
	</wsdl:message>

	<wsdl:message name="GeneralFault">
		<wsdl:part name="fault" element="tns:GeneralFault"/>
	</wsdl:message>

	<wsdl:message name="InvalidArgumentFault">
		<wsdl:part name="fault" element="tns:InvalidArgumentFault"/>
	</wsdl:message>

	<wsdl:message name="ConferenceNotExistFault">
		<wsdl:part name="fault" element="tns:ConferenceNotExistFault"/>
	</wsdl:message>

	<wsdl:message name="EndpointNotExistFault">
		<wsdl:part name="fault" element="tns:EndpointNotExistFault"/>
	</wsdl:message>

	<wsdl:message name="ResourceNotAvailableFault">
		<wsdl:part name="fault" element="tns:ResourceNotAvailableFault"/>
	</wsdl:message>

	<wsdl:message name="NotLicensedFault">
		<wsdl:part name="fault" element="tns:NotLicensedFault"/>
	</wsdl:message>

	<wsdl:message name="NotSupportedFault">
		<wsdl:part name="fault" element="tns:NotSupportedFault"/>
	</wsdl:message>

	<wsdl:portType name="VidyoManagerServicePortType">
		<wsdl:operation name="createConference">
			<wsdl:documentation>Creates a Conference</wsdl:documentation>
			<wsdl:input message="tns:CreateConferenceInput"/>
			<wsdl:output message="tns:CreateConferenceOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="changeConference">
			<wsdl:documentation>Change a Conference</wsdl:documentation>
			<wsdl:input message="tns:ChangeConferenceInput"/>
			<wsdl:output message="tns:ChangeConferenceOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="deleteConference">
			<wsdl:documentation>Deletes a Conference</wsdl:documentation>
			<wsdl:input message="tns:DeleteConferenceInput"/>
			<wsdl:output message="tns:DeleteConferenceOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="disconnectAll">
			<wsdl:documentation>Deletes a Conference</wsdl:documentation>
			<wsdl:input message="tns:DisconnectAllInput"/>
			<wsdl:output message="tns:DisconnectAllOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="addEndpoint">
			<wsdl:documentation>Add an Endpoint to Conference</wsdl:documentation>
			<wsdl:input message="tns:AddEndpointInput"/>
			<wsdl:output message="tns:AddEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="removeEndpoint">
			<wsdl:documentation>Remove an Endpoint from Conference</wsdl:documentation>
			<wsdl:input message="tns:RemoveEndpointInput"/>
			<wsdl:output message="tns:RemoveEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="makeCall">
			<wsdl:documentation>Make a 2-party call between given endpoints using the given conference</wsdl:documentation>
			<wsdl:input message="tns:MakeCallInput"/>
			<wsdl:output message="tns:MakeCallOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="inviteEndpoint">
			<wsdl:documentation>Make a 2-party call between given endpoints using the given conference</wsdl:documentation>
			<wsdl:input message="tns:InviteEndpointInput"/>
			<wsdl:output message="tns:InviteEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="cancelInviteEndpoint">
			<wsdl:documentation>Make a 2-party call between given endpoints using the given conference</wsdl:documentation>
			<wsdl:input message="tns:CancelInviteEndpointInput"/>
			<wsdl:output message="tns:CancelInviteEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="startRing">
			<wsdl:documentation>Send Invitation to second party in call</wsdl:documentation>
			<wsdl:input message="tns:StartRingInput"/>
			<wsdl:output message="tns:StartRingOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
		</wsdl:operation>

		<wsdl:operation name="stopRing">
			<wsdl:documentation>Stop send Invitation to second party in call.</wsdl:documentation>
			<wsdl:input message="tns:StopRingInput"/>
			<wsdl:output message="tns:StopRingOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
		</wsdl:operation>

		<wsdl:operation name="startAlert">
			<wsdl:documentation>Send Invitation to second party in call</wsdl:documentation>
			<wsdl:input message="tns:StartAlertInput"/>
			<wsdl:output message="tns:StartAlertOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
		</wsdl:operation>

		<wsdl:operation name="stopAlert">
			<wsdl:documentation>Stop send Invitation to second party in call.</wsdl:documentation>
			<wsdl:input message="tns:StopAlertInput"/>
			<wsdl:output message="tns:StopAlertOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>
		</wsdl:operation>

		<wsdl:operation name="createExternalLink">
			<wsdl:documentation>create a link to an external conference</wsdl:documentation>
			<wsdl:input message="tns:CreateExternalLinkInput"/>
			<wsdl:output message="tns:CreateExternalLinkOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="connectExternalLink">
			<wsdl:documentation>connect a link to an external conference</wsdl:documentation>
			<wsdl:input message="tns:ConnectExternalLinkInput"/>
			<wsdl:output message="tns:ConnectExternalLinkOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="allowExternalLink">
			<wsdl:documentation>Allow a link to an external conference</wsdl:documentation>
			<wsdl:input message="tns:AllowExternalLinkInput"/>
			<wsdl:output message="tns:AllowExternalLinkOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="removeExternalLink">
			<wsdl:documentation>remove a link to an external conference</wsdl:documentation>
			<wsdl:input message="tns:RemoveExternalLinkInput"/>
			<wsdl:output message="tns:RemoveExternalLinkOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="addSpontaneousEndpoint">
			<wsdl:documentation>Add an endpoint bypathing EMCP.</wsdl:documentation>
			<wsdl:input message="tns:AddSpontaneousEndpointInput"/>
			<wsdl:output message="tns:AddSpontaneousEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>			
		</wsdl:operation>

		<wsdl:operation name="removeSpontaneousEndpoint">
			<wsdl:documentation>Remove an endpoint bypathing EMCP.</wsdl:documentation>
			<wsdl:input message="tns:RemoveSpontaneousEndpointInput"/>
			<wsdl:output message="tns:RemoveSpontaneousEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>			
			<wsdl:fault name="ConferenceNotExistFault" message="tns:ConferenceNotExistFault"/>			
		</wsdl:operation>

		<wsdl:operation name="infoForEndpoint">
			<wsdl:documentation>Control for an active conference</wsdl:documentation>
			<wsdl:input message="tns:InfoForEndpointInput"/>
			<wsdl:output message="tns:InfoForEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="EndpointNotExistFault" message="tns:EndpointNotExistFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="getEMCPConfig">
			<wsdl:documentation>Get EMCP Configuration Infomation</wsdl:documentation>
			<wsdl:input message="tns:GetEMCPConfigInput"/>
			<wsdl:output message="tns:GetEMCPConfigOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="getSOAPConfig">
			<wsdl:documentation>Get SOAP Configuration Infomation</wsdl:documentation>
			<wsdl:input message="tns:GetSOAPConfigInput"/>
			<wsdl:output message="tns:GetSOAPConfigOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="getPortalConfig">
			<wsdl:documentation>Get Portal Configuration Infomation</wsdl:documentation>
			<wsdl:input message="tns:GetPortalConfigInput"/>
			<wsdl:output message="tns:GetPortalConfigOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="getLicenseData">
			<wsdl:documentation>Get current Effective License data</wsdl:documentation>
			<wsdl:input message="tns:GetLicenseDataInput"/>
			<wsdl:output message="tns:GetLicenseDataOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="setLicense">
			<wsdl:documentation>Request to apply a new license</wsdl:documentation>
			<wsdl:input message="tns:SetLicenseInput"/>
			<wsdl:output message="tns:SetLicenseOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="clearLicense">
			<wsdl:documentation>Request to clear the current system license</wsdl:documentation>
			<wsdl:input message="tns:ClearLicenseInput"/>
			<wsdl:output message="tns:ClearLicenseOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="setVidyoManagerLicense">
			<wsdl:documentation>Request to apply a new VM license</wsdl:documentation>
			<wsdl:input message="tns:SetVidyoManagerLicenseInput"/>
			<wsdl:output message="tns:SetVidyoManagerLicenseOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		<wsdl:operation name="addLicensedEndpoint">
			<wsdl:documentation>Request to add a licensed endpoint</wsdl:documentation>
			<wsdl:input message="tns:AddLicensedEndpointInput"/>
			<wsdl:output message="tns:AddLicensedEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
		</wsdl:operation>

		<wsdl:operation name="removeLicensedEndpoint">
			<wsdl:documentation>Request to remove a licensed endpoint</wsdl:documentation>
			<wsdl:input message="tns:RemoveLicensedEndpointInput"/>
			<wsdl:output message="tns:RemoveLicensedEndpointOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
		</wsdl:operation>

		<wsdl:operation name="getGroups">
			<wsdl:documentation>Get current Effective License data</wsdl:documentation>
			<wsdl:input message="tns:GetGroupsInput"/>
			<wsdl:output message="tns:GetGroupsOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		 <wsdl:operation name="getVidyoRouters">
			<wsdl:documentation>Get currently available VidyoRouters</wsdl:documentation>
			<wsdl:input message="tns:GetVidyoRoutersInput"/>
			<wsdl:output message="tns:GetVidyoRoutersOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="InvalidArgumentFault" message="tns:InvalidArgumentFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
			<wsdl:fault name="NotLicensedFault" message="tns:NotLicensedFault"/>
		</wsdl:operation>

		 <wsdl:operation name="getVidyoManagerSystemID">
			<wsdl:documentation>Get Vidyo Manager System Identifier</wsdl:documentation>
			<wsdl:input message="tns:GetVidyoManagerSystemIDInput"/>
			<wsdl:output message="tns:GetVidyoManagerSystemIDOutput"/>
			<wsdl:fault name="GeneralFault" message="tns:GeneralFault"/>
			<wsdl:fault name="ResourceNotAvailableFault" message="tns:ResourceNotAvailableFault"/>
		</wsdl:operation>
	</wsdl:portType>


	<wsdl:binding name="VidyoManagerServiceBinding" type="tns:VidyoManagerServicePortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="createConference">
			<soap:operation soapAction="createConference"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="changeConference">
			<soap:operation soapAction="changeConference"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="deleteConference">
			<soap:operation soapAction="deleteConference"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="disconnectAll">
			<soap:operation soapAction="disconnectAll"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="addEndpoint">
			<soap:operation soapAction="addEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="removeEndpoint">
			<soap:operation soapAction="removeEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="makeCall">
			<soap:operation soapAction="makeCall"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="inviteEndpoint">
			<soap:operation soapAction="inviteEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="cancelInviteEndpoint">
			<soap:operation soapAction="cancelInviteEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="startRing">
			<soap:operation soapAction="startRing"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="stopRing">
			<soap:operation soapAction="stopRing"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="startAlert">
			<soap:operation soapAction="startAlert"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="stopAlert">
			<soap:operation soapAction="stopAlert"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="createExternalLink">
			<soap:operation soapAction="createExternalLink"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="connectExternalLink">
			<soap:operation soapAction="connectExternalLink"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="allowExternalLink">
			<soap:operation soapAction="allowExternalLink"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="removeExternalLink">
			<soap:operation soapAction="removeExternalLink"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="addSpontaneousEndpoint">
			<soap:operation soapAction="addSpontaneousEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="removeSpontaneousEndpoint">
			<soap:operation soapAction="removeSpontaneousEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ConferenceNotExistFault">
				<soap:fault name="ConferenceNotExistFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="infoForEndpoint">
			<soap:operation soapAction="infoForEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="EndpointNotExistFault">
				<soap:fault name="EndpointNotExistFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getEMCPConfig">
			<soap:operation soapAction="getEMCPConfig"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getSOAPConfig">
			<soap:operation soapAction="getSOAPConfig"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getPortalConfig">
			<soap:operation soapAction="getPortalConfig"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getLicenseData">
			<soap:operation soapAction="getLicenseData"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="setLicense">
			<soap:operation soapAction="setLicense"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="clearLicense">
			<soap:operation soapAction="clearLicense"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="setVidyoManagerLicense">
			<soap:operation soapAction="setVidyoManagerLicense"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="addLicensedEndpoint">
			<soap:operation soapAction="addLicensedEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="removeLicensedEndpoint">
			<soap:operation soapAction="removeLicensedEndpoint"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getGroups">
			<soap:operation soapAction="getGroups"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getVidyoRouters">
			<soap:operation soapAction="getVidyoRouters"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="InvalidArgumentFault">
				<soap:fault name="InvalidArgumentFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="NotLicensedFault">
				<soap:fault name="NotLicensedFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>

		<wsdl:operation name="getVidyoManagerSystemID">
			<soap:operation soapAction="getVidyoManagerSystemID"/>
			<wsdl:input>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</wsdl:output>
			<wsdl:fault name="GeneralFault">
				<soap:fault name="GeneralFault" use="literal"/>
			</wsdl:fault>
			<wsdl:fault name="ResourceNotAvailableFault">
				<soap:fault name="ResourceNotAvailableFault" use="literal"/>
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>

	<wsdl:service name="VidyoManagerService">
		<wsdl:port name="VidyoManagerServicePort" binding="tns:VidyoManagerServiceBinding">
			<soap:address location="http://localhost:VM_SOAP_PORT/vidyo/services/VidyoManagerService"/>
		</wsdl:port>
	</wsdl:service>

</wsdl:definitions>
