/**
 * 
 */
package com.vidyo.service.transaction;

import java.util.List;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Component;

import com.vidyo.bo.Tenant;
import com.vidyo.bo.transaction.TransactionFilter;
import com.vidyo.bo.transaction.TransactionHistory;
import com.vidyo.db.ITenantDao;
import com.vidyo.db.transaction.TransactionDao;
import com.vidyo.framework.context.TenantContext;
import com.vidyo.framework.security.authentication.VidyoUserDetails;

/**
 * @author Ganesh
 * 
 */
public class TransactionServiceImpl implements TransactionService {

	/**
	 * 
	 */
	protected final Logger logger = LoggerFactory.getLogger(TransactionServiceImpl.class.getName());

	/**
	 * 
	 */
	private TransactionDao transactionDao;
	
	/**
	 * 
	 */
	private ITenantDao tenantDao;

	/**
	 * @param transactionDao
	 *            the transactionDao to set
	 */
	public void setTransactionDao(TransactionDao transactionDao) {
		this.transactionDao = transactionDao;
	}

	/**
	 * Inserts a single Transaction History record in to the TransactionHistory
	 * table
	 * 
	 * @param transactionHistory
	 *            Business Object holding the transaction data
	 * @return transactionID autogenerated Identifier from the Database
	 */
	@Override
	public int addTransactionHistory(TransactionHistory transactionHistory) {
		logger.debug(ToStringBuilder.reflectionToString(transactionHistory, ToStringStyle.SHORT_PREFIX_STYLE));
		if (transactionHistory.getTransactionParams() != null
				&& transactionHistory.getTransactionParams().length() > 2000) {
			transactionHistory.setTransactionParams(transactionHistory.getTransactionParams().substring(0, 2000));
		}

		String userID = transactionHistory.getUserID();
		if (userID != null && userID.length() > 80) {
			logger.error("UserID length exceeds 80 characters. userID = " + userID);
			transactionHistory.setUserID(userID.substring(0, 80));
		}		
		return transactionDao.addTransactionHistory(transactionHistory);
	}

	public int getTransactionHistoryCountForPeriod(TransactionFilter filter) {
		return transactionDao.getTransactionHistoryCountBetweenDates(filter);
	}

	/**
	 * Returns the Transaction History Records based on the filter provided
	 * 
	 * @param filter
	 * @return
	 */
	public List<TransactionHistory> getTransactionHistoryForPeriod(TransactionFilter filter) {
		return transactionDao.getTransactionHistoryBetweenDates(filter);
		
	}

	public long deleteTransactionHistoryForPeriod() {
		return transactionDao.deleteTransactionHistoryForPeriod();
	}

	/**
	 * This method would use SecurityContextHolder to get the user<br>
	 * who is performing the operation.
	 * 
	 * @param transactionHistory
	 * @return generated id of the record
	 */
	public int addTransactionHistoryWithUserLookup(TransactionHistory transactionHistory) {
	    return addTransactionHistoryWithUserLookup(transactionHistory, null);
	}

	public int addTransactionHistoryWithUserLookup(TransactionHistory transactionHistory, String username) {
		// User performing the disconnect operation
		if (SecurityContextHolder.getContext().getAuthentication() != null
				&& SecurityContextHolder.getContext().getAuthentication().getDetails() instanceof WebAuthenticationDetails) {
			WebAuthenticationDetails webAuthenticationDetails = (WebAuthenticationDetails) SecurityContextHolder
					.getContext().getAuthentication().getDetails();
			transactionHistory.setSourceIP(webAuthenticationDetails.getRemoteAddress());
		} else if (SecurityContextHolder.getContext().getAuthentication() != null
				&& SecurityContextHolder.getContext().getAuthentication().getDetails() instanceof VidyoUserDetails) {

			VidyoUserDetails vidyoUserDetails = (VidyoUserDetails) SecurityContextHolder.getContext()
					.getAuthentication().getDetails();
			transactionHistory.setSourceIP(vidyoUserDetails.getSourceIP());
		}
		if(SecurityContextHolder.getContext().getAuthentication() !=  null) {
			username = SecurityContextHolder.getContext().getAuthentication().getName();
		}
		transactionHistory.setUserID(username);
		return addTransactionHistory(transactionHistory);
	}
	
	/**
     * This method would use TenantContext to get the Tenant Details<br>
	 * and SecurityConextHolder to get the user performing the operation.
	 * 
	 * @param transactionHistory
	 * @return generated id of the record
	 */
	@Override
	public int addTransactionHistoryWithUserAndTenantLookup(TransactionHistory transactionHistory) {
		return addTransactionHistoryWithUserAndTenantLookup(transactionHistory, null);
	}

	/**
	 * This method would use TenantContext to get the Tenant Details<br>
	 * and SecurityConextHolder to get the user performing the operation.
	 *
	 * @param transactionHistory
	 * @return generated id of the record
	 */
	@Override
	public int addTransactionHistoryWithUserAndTenantLookup(TransactionHistory transactionHistory, String username) {
		Tenant tenant = tenantDao.getTenant(TenantContext.getTenantId());
		String tenantName = tenant != null ? tenant.getTenantName() : "Unknown";
		transactionHistory.setTenantName(tenantName);
			return addTransactionHistoryWithUserLookup(transactionHistory, username);
	}

	/**
	 * @param tenantDao the tenantDao to set
	 */
	public void setTenantDao(ITenantDao tenantDao) {
		this.tenantDao = tenantDao;
	}
}
