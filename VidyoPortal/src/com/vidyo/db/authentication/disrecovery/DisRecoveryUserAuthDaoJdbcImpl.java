/**
 * 
 */
package com.vidyo.db.authentication.disrecovery;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.googlecode.ehcache.annotations.Cacheable;
import com.googlecode.ehcache.annotations.KeyGenerator;
import com.googlecode.ehcache.annotations.Property;
import com.vidyo.framework.executors.ShellCapture;
import com.vidyo.framework.executors.ShellExecutor;
import com.vidyo.framework.executors.exception.ShellExecutorException;

/**
 * @author ganesh
 *
 */
public class DisRecoveryUserAuthDaoJdbcImpl implements DisRecoveryUserAuthDao {

	/**
	 * 
	 */
	protected static final Logger logger = LoggerFactory.getLogger(DisRecoveryUserAuthDaoJdbcImpl.class);

	/**
	 * Hardcoded username from config
	 */
	private String username;

	/**
	 * File path for DR auth token
	 */
	private String drAuthTokenFilePath;

	/**
	 * Command input for the sudo
	 */
	private String command;

	/**
	 * @param username
	 */
	public DisRecoveryUserAuthDaoJdbcImpl(String username, String drAuthTokenFilePath, String command) {
		this.username = username;
		this.drAuthTokenFilePath = drAuthTokenFilePath;
		this.command = command;
	}

	/**
	 * Reads the password from a file generated by the DR setup. Also validates
	 * if the username is "drmgr". The username is set while the DAO instance is
	 * created and can be changed from security context xml.
	 */
	@Override
	@Cacheable(cacheName = "disRecUserCache", keyGenerator = @KeyGenerator(name = "HashCodeCacheKeyGenerator", properties = @Property(name = "includeMethod", value = "false")))
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		if (!this.username.equals(username)) {
			logger.error("Username does not match the configured username for this service");
			throw new UsernameNotFoundException("Username not found" + username);
		}
		String[] cmd = new String[] { "sudo", "-n", drAuthTokenFilePath, command };
		ShellCapture capture = null;
		try {
			capture = ShellExecutor.execute(cmd);
		} catch (ShellExecutorException e) {
			logger.error("Exception while executing the shell command to retrieve DR auth token");
			throw new UsernameNotFoundException("Username not found" + username);
		}
		if (capture == null || capture.getExitCode() != 0) {
			logger.error("Error while executing the shell command to retrieve DR auth token");
			throw new UsernameNotFoundException("Username not found" + username);
		}
		List<GrantedAuthority> dbAuths = new ArrayList<GrantedAuthority>();
		GrantedAuthority authority = new SimpleGrantedAuthority("ROLE_DR");
		dbAuths.add(authority);
		User user = new User(this.username, capture.getStdOut().trim(), true, true, true, true, dbAuths);
		return user;
	}

}
